'use client'
import {Inter} from "next/font/google";
import "./globals.css";
import * as React from 'react';
import {styled, createTheme, ThemeProvider} from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import MuiDrawer from '@mui/material/Drawer';
import Box from '@mui/material/Box';
import MuiAppBar, {AppBarProps as MuiAppBarProps} from '@mui/material/AppBar';
import Toolbar from '@mui/material/Toolbar';
import List from '@mui/material/List';
import Typography from '@mui/material/Typography';
import Divider from '@mui/material/Divider';
import IconButton from '@mui/material/IconButton';
import Badge from '@mui/material/Badge';
import Link from '@mui/material/Link';
import MenuIcon from '@mui/icons-material/Menu';
import ChevronLeftIcon from '@mui/icons-material/ChevronLeft';
import NotificationsIcon from '@mui/icons-material/Notifications';
import {placeHolderItems} from './listItems';
import ProSidebar from "@/app/components/menubar/ProSidebar";
import LandscapeSelector from "@/app/components/filter/LandscapeSelector";
import {FilterContext, FilterProvider} from "@/app/components/filter/FilterContext";
import {QueryClient, QueryClientProvider, useQuery} from "@tanstack/react-query";
import {ReactQueryDevtools} from "@tanstack/react-query-devtools";

const inter = Inter({subsets: ["latin"]});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

function Copyright(props: any) {
    return (
        <Typography variant="body2" color="text.secondary" align="center" {...props}>
            {'Copyright Â© '}
            <Link color="inherit" href="https://foxcraftafrica.com/">
                FoxCraft Africa
            </Link>{' '}
            {new Date().getFullYear()}
            {'.'}
        </Typography>
    );
}

const drawerWidth: number = 240;

interface AppBarProps extends MuiAppBarProps {
    open?: boolean;
}

const AppBar = styled(MuiAppBar, {
    shouldForwardProp: (prop) => prop !== 'open',
})<AppBarProps>(({theme, open}) => ({
    zIndex: theme.zIndex.drawer + 1,
    transition: theme.transitions.create(['width', 'margin'], {
        easing: theme.transitions.easing.sharp,
        duration: theme.transitions.duration.leavingScreen,
    }),
    ...(open && {
        marginLeft: drawerWidth,
        width: `calc(100% - ${drawerWidth}px)`,
        transition: theme.transitions.create(['width', 'margin'], {
            easing: theme.transitions.easing.sharp,
            duration: theme.transitions.duration.enteringScreen,
        }),
    }),
}));

const Drawer = styled(MuiDrawer, {shouldForwardProp: (prop) => prop !== 'open'})(
    ({theme, open}) => ({
        '& .MuiDrawer-paper': {
            position: 'relative',
            whiteSpace: 'nowrap',
            width: drawerWidth,
            transition: theme.transitions.create('width', {
                easing: theme.transitions.easing.sharp,
                duration: theme.transitions.duration.enteringScreen,
            }),
            boxSizing: 'border-box',
            ...(!open && {
                overflowX: 'hidden',
                transition: theme.transitions.create('width', {
                    easing: theme.transitions.easing.sharp,
                    duration: theme.transitions.duration.leavingScreen,
                }),
                width: theme.spacing(7),
                [theme.breakpoints.up('sm')]: {
                    width: theme.spacing(9),
                },
            }),
        },
    }),
);

// TODO remove, this demo shouldn't need to reset the theme.
const defaultTheme = createTheme();
const queryClient = new QueryClient()
export default function RootLayout({
                                       children,
                                   }: Readonly<{
    children: React.ReactNode;
}>) {
    const [open, setOpen] = React.useState(true);
    const toggleDrawer = () => {
        setOpen(!open);
    };
    return (
        <html lang="en">
        <body suppressHydrationWarning={true}>
        <ThemeProvider theme={defaultTheme}>
            <QueryClientProvider client={queryClient}>
                <FilterProvider>
                    <Box sx={{display: 'flex'}}>
                        <CssBaseline/>
                        {/*<AppBar position="absolute" open={open}>*/}
                        {/*    <Toolbar*/}
                        {/*        sx={{*/}
                        {/*            pr: '24px', // keep right padding when drawer closed*/}
                        {/*            bgcolor: '#347928'*/}
                        {/*        }}*/}
                        {/*    >*/}
                        {/*        <IconButton*/}
                        {/*            edge="start"*/}
                        {/*            color="inherit"*/}
                        {/*            aria-label="open drawer"*/}
                        {/*            onClick={toggleDrawer}*/}
                        {/*            sx={{*/}
                        {/*                marginRight: '36px',*/}
                        {/*                ...(open && {display: 'none'}),*/}
                        {/*            }}*/}
                        {/*        >*/}
                        {/*            <MenuIcon/>*/}
                        {/*        </IconButton>*/}
                        {/*        <LandscapeSelector/>*/}
                        {/*        <IconButton color="inherit">*/}
                        {/*            <Badge badgeContent={4} color="secondary">*/}
                        {/*                <NotificationsIcon/>*/}
                        {/*            </Badge>*/}
                        {/*        </IconButton>*/}
                        {/*    </Toolbar>*/}
                        {/*</AppBar>*/}
                        <Drawer variant="permanent" open={open} sx={{bgcolor: '#8e7b12'}}>
                            <Toolbar
                                sx={{
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'flex-end',
                                    px: [1],
                                }}
                            >
                                <Typography variant='h5' component='h2'>
                                    <b>LUMMIS</b>
                                </Typography>
                                <IconButton onClick={toggleDrawer}>
                                    <ChevronLeftIcon/>
                                </IconButton>
                            </Toolbar>
                            <Divider/>
                            <ProSidebar/>

                            <Divider sx={{mt: 'auto'}}/>
                            <List>
                                {placeHolderItems}
                            </List>
                        </Drawer>

                        <Box
                            component="main"
                            sx={{
                                backgroundColor: (theme) =>
                                    theme.palette.mode === 'light'
                                        ? theme.palette.grey[100]
                                        : theme.palette.grey[900],

                                flexGrow: 1,
                                height: '100vh',
                                overflow: 'hidden',
                            }}
                        >
                            {/*<Toolbar/>*/}
                            {children}
                        </Box>
                    </Box>
                </FilterProvider>
                <ReactQueryDevtools initialIsOpen={false} />
            </QueryClientProvider>
        </ThemeProvider>
        </body>
        </html>
    );
}
